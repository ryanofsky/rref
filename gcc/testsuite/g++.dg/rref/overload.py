import sys
import StringIO

# template for output file
template = """\
// { dg-do link }
// Generated by overload.py

struct S{};

S s;                         // non-const lvalue
S const cs = s;              // const lvalue
S f() { return S(); }        // non-const rvalue
S const cf() { return S(); } // const rvalue

%(funcs)s
int main()
{
%(calls)s
  return 0;
}
"""

# parameters to overload on
params = ['S&', 'const S&', 'S&&', 'const S&&']

# arguments to test overloads on: lvalues, const lvalues, rvalues,
# and non-const rvalues
args = ['s', 'cs', 'f()', 'cf()']
function_prefixes = ['l', 'cl', 'r', 'cr']

# everybody get out your sharpened number 2 pencils
answers = [
   0, #l1000
   1, #l0100
   0, #l1100
   2, #l0010
   0, #l1010
   1, #l0110
   0, #l1110
   3, #l0001
   0, #l1001
   1, #l0101
   0, #l1101
   2, #l0011
   0, #l1011
   1, #l0111
   0, #l1111
   None, #cl1000
   1, #cl0100
   1, #cl1100
   None, #cl0010
   None, #cl1010
   1, #cl0110
   1, #cl1110
   3, #cl0001
   3, #cl1001
   1, #cl0101
   1, #cl1101
   3, #cl0011
   3, #cl1011
   1, #cl0111
   1, #cl1111
   None, #r1000
   1, #r0100
   1, #r1100
   2, #r0010
   2, #r1010
   2, #r0110
   2, #r1110
   3, #r0001
   3, #r1001
   3, #r0101
   3, #r1101
   2, #r0011
   2, #r1011
   2, #r0111
   2, #r1111
   None, #cr1000
   1, #cr0100
   1, #cr1100
   None, #cr0010
   None, #cr1010
   1, #cr0110
   1, #cr1110
   3, #cr0001
   3, #cr1001
   3, #cr0101
   3, #cr1101
   3, #cr0011
   3, #cr1011
   3, #cr0111
   3, #cr1111
]

funcs = StringIO.StringIO()
calls = StringIO.StringIO()

for arg_idx in range(len(args)):
  for param_set in range(1, 1<<len(params)):
    answer = answers[arg_idx * ((1<<len(params))-1) + param_set - 1]
    if answer is None:
      continue

    func_name = []
    func_params = []
    for param_idx in range(len(params)):
      if param_set & (1 << param_idx):
        func_params.append(param_idx)
        func_name.append('1')
      else:
        func_name.append('0')

    func_name = function_prefixes[arg_idx] + ''.join(func_name)

    for param_idx in func_params:
      body = param_idx == answer and ' {};' or ';'
      funcs.write('void %s(%s)%s\n' % (func_name, params[param_idx], body))
    funcs.write('\n')

    calls.write('  %s(%s);\n' % (func_name, args[arg_idx]))

sys.stdout.write(template % { 'funcs': funcs.getvalue(),
                              'calls': calls.getvalue()})

