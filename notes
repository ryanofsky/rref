-----------------------------------------------------------
convert_like_real and friends

convert_like_real (call.c:4124)
  convert_like_real...
  cp_convert (cvt.c:587)
    ocp_convert (cvt.c:595)
      build_type_conversion (cvt.c:1015)
        build_user_type_conversion (call.c:2661)
          build_user_type_conversion_1 (call.c:2489)
            add_function_candidate
            tourney
          convert_like_real... via convert_like (call.c:134)
          convert_from_reference (cvt.c:547)
            build1(INDIRECT_REF)
      build_special_member_call (call.c:5057)
        lookup_fnfields
        decay_conversion...
        build_new_method_call (call.c:5209)
          resolve_args
          add_function_candidate
          tourney
          build_over_call (call.c:4627)
            convert_like_real... via convert_like_with_context (call.c:138)
            check_function_arguments (../c-common.c:5320)
            build_indirect_ref (typeck.c:2069)
              build1(INDIRECT_REF)
            stabilize_reference (../tree.c:2203)
            convert (cvt.c:949)
              ocp_convert...
            mark_used (decl2.c:3169)
            build_cxx_call (call.c:4934)
              build_call (call.c:274)
                build3(CALL_EXPR)
              build_cplus_new (tree.c:282)
                convert...
                build_local_temp (tree.c:268)
                  build_decl(VAR_DECL)
                build_target_expr (tree.c:250)
                  build4(TARGET_EXPR)
              convert_from_reference...
      build_cplus_new...
  build_over_call...
  build_cplus_new...
  build_temp (call.c:4097)
    build_special_member_call...
  check_constructor_callable (call.c:4079)
    build_special_member_call...
  convert_to_base (class.c:461)
    build_base_path(PLUS_EXPR)
  build_indirect_ref...
  build_target_expr_with_type (tree.c:337)
    force_rvalue (cvt.c:576)
      ocp_convert
      decay_conversion (typeck.c:1340)
        build_nop (typeck.c:3670)
          build1(NOP_EXPR)
        build_pointer_type (../tree.c:4233)
         cp_convert...
    build_local_temp...
    build_target_expr...
  cp_convert...
  decay_conversion...
  ocp_convert...

convert_for_initialization (typeck.c:5876)
  decay_conversion...
  initialize_reference (call:6467)
  | reference_binding (call.c:1065)
      direct_reference_binding
  | check_constructor_callable...
  | convert_like_real...
  | make_temporary_var_for_ref_to_temp (call.c:6428)
      build_decl (VAR_DECL)
      mangle_ref_init_variable
      pushdecl_top_level
  | build_address (typeck.c:3653)
      build1(ADDR_EXPR)
  | convert_to_base...
  | perform_implicit_conversion (call.c:6342)
      implicit_conversion (call.c:1225)
        reference_binding...
        standard_conversion (call.c:583)
          build_conv
        build_user_type_conv...
      convert_like...
  | convert_like...
  ocp_convert...
  convert_for_assignment (typeck.c:5801)
    cp_convert...
    perform_implicit_conversion...

-----------------------------------------------------------
temporaries

12.2 class.temporary (213) - lifetime of temporaries
12.8/15 class.copy (233) - copy elision
8.5.3/5 dcl.init.ref (173) - binding rvalue to reference
6.6.3 stmt.return (124) - return statement
4.1 conv.lval (83) - converting expression to rvalue
5.2.9 expr.static.cast (98) - converting to rvalue, static cast
5.4 expr.cast (108) - converting to rvalue, explicit cast
8.5/14 dcl.init (169) - temporaries for initialization

-----------------------------------------------------------
infinite recursion bug

gdb ~/devel/rref_inst/libexec/gcc/i686-pc-linux-gnu/4.0.0/cc1plus
run -D_GNU_SOURCE cast-bug.C -o out

finish_return_stmt (semantics.c) 69
check_return_expr (typeck.c)
convert_for_initialization (typeck.c)
ocp_convert (cvt.c)

[1]
build_special_member_call (call.c) 65
build_new_method_call (call.c)
build_over_call (call.c)
convert_like_real (call.c)
convert_like_real (call.c)
check_constructor_callable (call.c)

[2]
build_special_member_call (call.c)  59
build_new_method_call (call.c)
build_over_call (call.c)
convert_like_real (call.c)
build_target_expr_with_type (tree.c)
force_rvalue (cvt.c)
ocp_convert (cvt.c)

[1][2] ...

-----------------------------------------------------------
template type deduction

  unify (pt.c, static)
    type_unification_real (pt.c, static)
      fn_type_unification (pt.c)
        add_template_candidate_real (call.c, static)
          add_template_candidate (call.c, static)
            add_candidates
              perform_overload_resolution
                build_new_function_call
            convert_class_to_reference (call.c, static)*
            build_user_type_conversion_1 (call.c, static)*
            build_object_call (call.c, static)*
            add_candidates (call.c, static)*
            build_new_method.call (call.c, static)*
          add_template_conv_candidate (call.c, static)
            build_object_call (call.c, static)*
        get_bindings_real (pt.c, static)
          get_bindings (pt.c, static)
            determine_specialization (pt.c, static)*
            most_specialized (pt.c, static)*
          get_bindings_overload (pt.c, static)
            resolve_overloaded_unification (pt.c, static)*
          more_specialized (pt.c)*
        resolve_address_of_overloaded_function (class.c, static)*
          instantiate_type (class.c)*
    try_one_overload (pt.c, static)
      resolve_overloaded_unification (pt.c, static)
        type_unification_real ...
    try_class_unification (pt.c, static)*
    get_class_bindings (pt.c, static)*

fn_type_unification
  (fn,
   explicit_targs,
   targs - deduced args out,
   args - function call args)

type_unification_real
  (tparms - DECL_INNERMOST_TEMPLATE_PARMS,
   targs - deduced args out,
   xparms - function declaration args,
   xargs - function call args)

   parm/parms, arg/args - iterated xparms, xargs

unify
  (tparms - template parameters
   targs - deduced args out
   parm - function declaration param type
   arg - funcion call arg type)

-----------------------------------------------------------
templates

TEMPLATE_DECL
  DECL_ARGUMENTS - param vector
  DECL_TEMPLATE_INFO - ?
  DECL_VINDEX - instantiation list
  DECL_INITIAL - for classes ?
  DECL_TEMPLATE_RESULT - for functions, FUNCTION_DECL with substituted params
  TREE_TYPE - for functions ?

TEMPLATE_PARM_INDEX
TEMPLATE_PARM_LEVEL
  numeric indices into param lists

// template parameters
TEMPLATE_TEMPLATE_PARM
  TYPE_FIELDS a is TEMPLATE_PARM_INDEX
TEMPLATE_TYPE_PARAM
  type parm, type.value field is a TEMPLATE_PARM_INDEX

TYPENAME_TYPE
  for "typename T::t"
  TYPE_CONTEXT is "T"
  TYPE_NAME is IDENTIFIER_NODE for "t"
TYPEOF_TYPE_PARM
  for typeof expressions

BOUND_TEMPLATE_TEMPLATE_PARAM
  for "TT<int>"
  TEMPLATE_TEMPLATE_PARM_TEMPLATE_INFO holds name & args
  TYPE_NAME is a TYPE_DECL

UNBOUND_CLASS_TEMPLATE
  for "T::template C"
  TYPE_CONTEXT is "T"
  TYPE_NAME is "IDENTIFIER_NODE" for "C"

TEMPLATE_ID_EXPR
  for "foo<int>"
  first operand is template
  second operand is NULL for no explicit arguments or a TREE_VEC of arguments

TINST_LEVEL
  node pointing to template declaration and location of instantiation, kept
  in a global stack

Members
  CLASSTYPE_TEMPLATE_INFO - template info from classtype
  DECL_TI_TEMPLATE(node) - TEMPLATE_DECL of instaniated/specialized NODE
  DECL_TI_ARGS(node) - full set of args passed to above to get NODE

-----------------------------------------------------------
reference collapsing

8.3.2/1 dcl.ref (158)
  cv-qualified references
8.3.2/4 dcl.ref (159)
  no refereces to references

reference to references
7.1.3/6 new para allowing for typedefs
14.3.1/4 new para allowing for template parameters
14.8.2/2 changed para allowing in template deduction

-----------------------------------------------------------
lvalue/rvalue stuff

3.10 basic.lval (81-82)
4/3 conv (83) result of implicit conversion
4.2 conv.lval (83) lvalue to rvalue conversion
8.5 dcl.init (167)
8.5.3 reference initialization
12.2 temporaries
12.8 direct initizliation

8.3.3/3 A pointer to member shall not point to ... a member with
reference type.

  lvalue_p_1 (static, tree.c)
    real_lvalue_p (tree.c)
      build_conditional_expr (call.c)
      make_temporary_var_for_ref_to_temp (call.c)
      convert_to_reference (cvt.c)
      convert_member_func_to_ptr (typeck.c)
    lvalue_p (tree.c)
      standard_conversion (call.c)
      convert_to_reference (cvt.c)
      build_array_ref (typeck.c)
      build_unary_op (typeck.c)
      convert_for_assignment (typeck.c)
      default_function_array_conversion (typeck.c)

-----------------------------------------------------------
overload resolution stuff

  finish_call_expr (semantics.c)
    build_new_method_call
    build_new_function_call
    build_new_op

  build_new_function_call (call.c)
    perform_overload_resolution (static)
      add_candidates (static)
        add_function_candidate (static)
          implicit_conversion (static)
            reference_binding (static)
            standard_conversion
            build_user_type_conversion_1
          add_candidate
        add_template_candidate (static)
          add_template_candidate_real (static)
            fn_type_unification
            instantiate_template
      splice_viable (static)
      tourney (static)
        joust (static)
          compare_ics
            maybe_handle_implicit_object
            maybe_handle_ref_bind
            is_subseq
            comp_cv_qual_signature
            comp_cv_qualification

-----------------------------------------------------------
reference binding stuff

reference_binding (call.c, static) called by
  implicit_conversion (call.c, static)
    reference_binding...
    add_function_candidate (call.c, static)*
    add_conv_candidate (call.c, static)*
    build_builtin_candidate (call.c, static)*
    build_user_type_conversion_1 (call.c, static)
      implicit_conversion...
      build_user_type_conversion (call.c)*
        convert_like_real (call.c, static)
          convert_like_real...
          perform_direct_initialization_if_possible (call.c)*
          initialize_reference (call.c)*
    conditional_conversion (call.c, static)*
    can_convert_arg (call.c)*
    can_convert_arg_bad (call.c)*
    perform_implicit_conversion (call.c)*
    perform_direct_initialization_if_possible (call.c)*
    conditional_expression (call.c)*
  initialize_reference (call.c)
    grok_reference_init (decl.c, static)
      check_initializer (decl.c, static)
        cp_finish_decl (decl.c)*
    convert_for_initialization (typeck.c)*

-----------------------------------------------------------
parsing stuff

simple-declaration:
  decl-specifier-seq[opt] init-declarator-list[opt]

  specifiers - type name, keyword modifiers
  declarators - names of things being declared, prefixed by
    optional *& and cv's

  ansi153 for declators

cp_parser_ptr_operator
  the ONLY place in the parse that takes CPP_AND for a reference decl.
  parses * & and following cv qualifiers.

  called in the following contexts

  cp_parser_new_type_id
    [follows "new" keyword and placement shits]
    cp_parser_type_specifier_seq
    cp_parser_new_declarator_opt
      **cp_parser_ptr_operator**

  cp_parser_conversion_type_id
    [follows "operator" keyword for user-defined conversion declarations]
    cp_parser_type_specifier_seq
    cp_parser_conversion_declarator_opt
      **cp_parser_ptr_operator**
    grokdeclarator

  cp_parser_declarator
    [gets types]
    **cp_parser_ptr_operator**
    cp_parser_direct_declarator

cp_parser_parameter_declaration
  parses parameter lists in function declarations

grokdeclarator (decl.c)
  enormous function that seems to be responsible for
  turning declarators into normal tree nodes

parser.c line 11322

