-----------------------------------------------------------
overload resolution stuff

compare_ics
  target_type# - type of reference if a reference parameter
  from_type# - if user conv or standard conv, type being converted from
                 skips up ics chain to user conv or non-identity conv
  to_type - ics#->type
  deref_from_type


  build_new_function_call (call.c)
    perform_overload_resolution (static)
      add_candidates (static)
        add_function_candidate (static)
          implicit_conversion (static)
            reference_binding (static)
            standard_conversion
            build_user_type_conversion_1
          add_candidate
        add_template_candidate (static)
          add_template_candidate_real (static)
            fn_type_unification
            instantiate_template
      splice_viable (static)
      tourney (static)
        joust (static)
          compare_ics
            maybe_handle_implicit_object
            maybe_handle_ref_bind
            is_subseq
            comp_cv_qual_signature
            comp_cv_qualification

-----------------------------------------------------------
reference binding stuff

reference_binding (call.c, static) called by
  implicit_conversion (call.c)*
    perform_implicit_conversion (call.c)
    can_convert_arg (call.c)
    conditional_expression (call.c)
  initialize_reference (call.c)
    grok_reference_init (decl.c, static)
      check_initializer (decl.c, static)
        cp_finish_decl (decl.c)*
    convert_for_initialization (typeck.c)*

-----------------------------------------------------------
parsing stuff

simple-declaration:
  decl-specifier-seq[opt] init-declarator-list[opt]

  specifiers - type name, keyword modifiers
  declarators - names of things being declared, prefixed by
    optional *& and cv's

  ansi153 for declators

cp_parser_ptr_operator
  the ONLY place in the parse that takes CPP_AND for a reference decl.
  parses * & and following cv qualifiers.

  called in the following contexts

  cp_parser_new_type_id
    [follows "new" keyword and placement shits]
    cp_parser_type_specifier_seq
    cp_parser_new_declarator_opt
      **cp_parser_ptr_operator**

  cp_parser_conversion_type_id
    [follows "operator" keyword for user-defined conversion declarations]
    cp_parser_type_specifier_seq
    cp_parser_conversion_declarator_opt
      **cp_parser_ptr_operator**
    grokdeclarator

  cp_parser_declarator
    [gets types]
    **cp_parser_ptr_operator**
    cp_parser_direct_declarator

cp_parser_parameter_declaration
  parses parameter lists in function declarations

grokdeclarator (decl.c)
  enormous function that seems to be responsible for
  turning declarators into normal tree nodes

parser.c line 11322

